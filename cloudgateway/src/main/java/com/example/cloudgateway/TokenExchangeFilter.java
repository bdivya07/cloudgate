package com.example.cloudgateway;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
public class TokenExchangeFilter extends AbstractGatewayFilterFactory<Object> {
    private final WebClient webClient;
    private final String tokenExchangeUrl;

    public TokenExchangeFilter(WebClient.Builder webClientBuilder, @Value("${token.exchange.url}") String tokenExchangeUrl) {
        this.webClient = webClientBuilder.build();
        this.tokenExchangeUrl = tokenExchangeUrl;
    }

    @Override
    public GatewayFilter apply(Object config) {
        return (exchange, chain) -> exchangeToken(exchange).flatMap(token -> {
            ServerHttpRequest modifiedRequest = exchange.getRequest().mutate()
                    .header(HttpHeaders.AUTHORIZATION, "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiI5NjNlNzJiNi01YzNmLTQwZGYtOWNiZS0yMGM2NDZiM2VmYWQiLCJhdWQiOiJhcGkuZGF0YS52bXdzZXJ2aWNlcy5jb20iLCJuYmYiOjE3MjIzMzYxODAsInZtd2FyZS5kaXNwbGF5X25hbWUiOiJkaWJAdm13YXJlLmNvbSIsInNjb3BlIjpbImRwYS5kYXl0aW1lLmRhc2hib2FyZC5yZWFkb25seSIsImRwYS5tZXJsb3QuZGFzaGJvYXJkLndpZGdldC5yZWFkb25seSIsImRwYS5rcm9uZW5ib3VyZy5wYXJ0bmVyLnJlYWRvbmx5IiwiZHBhLnByYW5xc3Rlci5vYXV0aGNsaWVudC5yZWFkb25seSIsImRwYS5wb3BxdWl6LnN1cnZleS5yZWFkb25seSIsImRwYS5zY29mZmxhdy5pbnNpZ2h0LnJlYWRvbmx5IiwiZHBhLm1lcmxvdC5lbnRpdHlfbWV0cmljcy5yZWFkb25seSIsImRwYS5ibGFudG9ucy5vcmcucmVnaXN0cmF0aW9uIiwiZHBhLmdhbmdzdGVyLmFjY291bnQucmVhZG9ubHkiLCJkcGEuZm9yY2VvZndpbGwuc2V0dGluZ3MucmVwb3J0LnJlYWRvbmx5IiwiZHBhLnNjb2ZmbGF3LmluY2lkZW50LnJlYWRvbmx5IiwiZHBhLmNtcy5jb25uZWN0b3JfY29uZmlndXJhdGlvbi5yZWFkb25seSIsImRwYS5zd2VldHdhdGVyLnNldHRpbmdzLnJlYWRvbmx5IiwiZHBhLm1lcmxvdC5zb2x1dGlvbl9zZXR0aW5nLnJlYWRvbmx5IiwiZHBhLmJsYW50b25zLmV1bGEucmVhZG9ubHkiLCJkcGEuY2hhdHRlcmJveC5ub3RpZmljYXRpb24ucnVsZXMiLCJkcGEubW9ycGhldXMudGVtcGxhdGUudWVtX3dvcmtmbG93cy5yZWFkb25seSIsImRwYS5ibGFudG9ucy5zb2x1dGlvbl9zZXR0aW5nLnJlYWRvbmx5IiwiZHBhLmdhbmdzdGVyLmRpcmVjdG9yeS5yZWFkb25seSIsImRwYS5wcmFucXN0ZXIuaWFtLmFjY291bnRncm91cC5yZWFkb25seSIsImRwYS5sYW5kc2hhcmsucmNhLnJlYWRvbmx5IiwiZHBhLmRheXRpbWUuc3RhbmRhcmQuZGFzaGJvYXJkLnJlYWRvbmx5IiwiZHBhLnN3ZWV0d2F0ZXIuYWRtaW4ud29ya2Zsb3cucmVhZG9ubHkiLCJkcGEuYmxhbnRvbnMuaWRtLnRlbmFudC5yZWFkb25seSIsImRwYS5idWJibGVzdGFzaC5tYXJrZXRwbGFjZS5yZWFkb25seSIsImRwYS5wcmFucXN0ZXIuaWFtLmludGVncmF0aW9uLnJlYWRvbmx5IiwiZHBhLmJsYW50b25zLmludGVncmF0aW9uLnJlZ2lzdHJhdGlvbi5yZWFkb25seSIsImRwYS5iaXJhLmlhbS5hY2NvdW50cy5yZWFkb25seSIsImRwYS5zd2VldHdhdGVyLndvcmtmbG93LnJlYWRvbmx5IiwiZHBhLmZvcmNlb2Z3aWxsLnRlbXBsYXRlLnJlcG9ydC5yZWFkb25seSIsImRwYS5mb3JjZW9md2lsbC5yZXBvcnQuc2NoZWR1bGUucmVhZG9ubHkiLCJkcGEuY2hhdHRlcmJveC5ub3RpZmljYXRpb24uc3Vic2NyaXB0aW9ucyIsImRwYS5nYW5nc3Rlci5kaXJlY3Rvcnlncm91cC5yZWFkb25seSIsImRwYS5tZXJsb3QucmVwb3J0LnJlYWRvbmx5IiwiZHBhLm1lcmxvdC5hcHByZWdpc3RyYXRpb24ucmVhZG9ubHkiLCJkcGEubGVkZW5pa2Eud29ya2Zsb3cucmVhZG9ubHkiLCJkcGEuc3RvbmV3YWxsLmhvcml6b24uZHluYW1pYy5jb25maWcucmVhZG9ubHkiLCJkcGEubWVybG90LmFkbWluLnJlcG9ydC5yZWFkb25seSIsImRwYS5tZXJsb3QucXVpY2suZmlsdGVyLnRhZ3MucmVhZG9ubHkiLCJkcGEuZm9yY2VvZndpbGwucmVwb3J0LnJlYWRvbmx5IiwiZHBhLmJ1enpraWxsLnNlcnZpY2VsaW1pdC5yZWFkb25seSIsImRwYS5zcGFjZWR1c3QuYWdncmVnYXRpb24uZGVmaW5pdGlvbi5yZWFkb25seSIsImRwYS5mb3JjZW9md2lsbC5yZXBvcnQuZG93bmxvYWQucmVhZG9ubHkiLCJkcGEuZ2xlbmZpZGRpY2guc3RhdGlzdGljcy5yZWFkb25seSIsImRwYS5xdWVyeWZveC5kYXNoYm9hcmQud2lkZ2V0LnJlYWRvbmx5IiwiZHBhLmJsYW50b25zLnRlbmFudC5wcm92aXNpb24ucmVhZG9ubHkiLCJkcGEucXVlcnlwaWxvdC5xdWVyeS5nZW5lcmF0aW9uIiwiZHBhLmJsYW50b25zLmZlZGVyYXRpb24uc2V0dGluZ3MucmVhZG9ubHkiLCJkcGEuY21zLmNvbm5lY3Rvcl9kZWZpbml0aW9uLnJlYWRvbmx5IiwiZHBhLmdsZW5maWRkaWNoLmludGVncmF0aW9ub2JqZWN0cy5yZWFkb25seSIsImRwYS5tZXJsb3QuaW50ZWdyYXRpb24ucmVhZG9ubHkiLCJkcGEuc2NvZmZsYXcucGxheWJvb2sucmVhZG9ubHkiLCJkcGEuZGF5dGltZS5zZXR0aW5ncy5kYXNoYm9hcmQucmVhZG9ubHkiLCJkcGEuZmlyZWJhbGwuY3Jhc2guZGVidWdmaWxlIiwiZHBhLmhlbm5lc3NleS5pbmFwcC5ub3RpZmljYXRpb24iLCJkcGEuc2N1bHBpbi5tZXRhZGF0YS5yZWFkb25seSIsImRwYS5nbGVuZmlkZGljaC5pbnRlZ3JhdGlvbmFjdGlvbnMucmVhZG9ubHkiLCJkcGEuYmxhbnRvbnMuc2VydmljZWNvbmZpZy5yZWFkb25seSIsImRwYS5tb3JwaGV1cy50ZW1wbGF0ZS5zY3JpcHRzLnJlYWRvbmx5IiwiZHBhLmRheXRpbWUuZGFzaGJvYXJkLndpZGdldC5yZWFkb25seSIsImRwYS5zd2VldHdhdGVyLnF1aWNrZmxvd3MuZXhlY3V0ZS5yZWFkb25seSIsImRwYS5kYXl0aW1lLmFkbWluLmRhc2hib2FyZC5yZWFkb25seSIsImRwYS5zY29mZmxhdy5hbGVydC5yZWFkb25seSIsImRwYS5ibGFudG9ucy5vcmcudHJpYWwiLCJkcGEuZm9yY2VvZndpbGwudXNlcnMucmVhZG9ubHkiLCJkcGEucHJhbnFzdGVyLnBhcnRuZXIucmVhZG9ubHkiLCJkcGEuc3RvbmV3YWxsLnNvbHV0aW9uLnNldHRpbmcubWV0cmljLnJlYWRvbmx5IiwiZHBhLnN0b25ld2FsbC5zeW50aGV0aWMudXJsLm1vbml0b3JpbmcucmVhZG9ubHkiLCJkcGEucHJhbnFzdGVyLmlhbS5hY2NvdW50LnJlYWRvbmx5IiwiZHBhLm1vcnBoZXVzLnRlbXBsYXRlLnNlbnNvcnMucmVhZG9ubHkiLCJkcGEucHJhbnFzdGVyLnJvbGUucmVhZG9ubHkiLCJkcGEuZm9yY2VvZndpbGwuYWRtaW4ucmVwb3J0LnJlYWRvbmx5Il0sImlzcyI6Imh0dHBzOlwvXC9hdXRoLnN0YWdpbmcuZHBhMC5vcmciLCJ2bXdhcmUub3JnX2lkIjoiMzYxZjkzNTEtNzY2YS00ZjIwLWExOTAtNWMxZWViYmIxMGI5IiwiZXhwIjoxNzIyMzUwOTIzLCJqdGkiOiJiZTA2NDJhNC00ZWZmLTRjMzgtOGUyMC0xOTU3ZDE2MmYwNjkiLCJ2bXdhcmUucm9sZSI6WyJmOWQ3N2UwMi00OTU0LTQ2N2ItODExZC1kYWYwYjU5YWJjM2EiXSwiaW50ZWdyYXRpb25faWRzIjpbIjg1NTcwZGNlLTExMGUtNDdmNC04YTBiLWYzZjBiZDM4MzUwZiIsImU2NzY2YTNjLWVlNGYtNGFhNy04N2E1LWZhZWU1MDc3OTAzNCJdfQ.jNDRatnYs9-J-hbPalk5CN8c7pz-HQ7DbxqJ5K9hSnRraRYlYjBd3y3TE7mVF1TjxSA0CY6AJRKQ1p8QMQPdBnCYq5RAvpGIzVD34x0Jj5JqGbuSmyPkur8OKhpAjmTZs6zln8A_guwnKpRYhCKnBfvH7HQt_LRGb3uOhC6e5MgIcguEbIMXvtaSMza9aE9ry8cm2LPMMheA1u7q8fBB_MbG3Pas0jGJ423q-WgBQpEGuone7nqEhcRUnPUqdp1-kM5h9ac9XtaWWlrJvnaDKwg8nyBqL9sN1v1OctsWTLg_Ee_jJo5i1xz2GU8pJWHUdgr53c8eLHDU239NVKPVIA")
                    .build();

            ServerWebExchange modifiedExchange = exchange.mutate().request(modifiedRequest).build();
            System.out.println("URL present "+modifiedExchange.getRequest().getURI());
            modifiedRequest.getHeaders().forEach((key, value) -> System.out.println(key + ": " + value));

            return chain.filter(modifiedExchange);
        }).then(Mono.fromRunnable(() -> {
            ServerHttpResponse response = exchange.getResponse();
            response.getHeaders().forEach((key, value) -> System.out.println("Response Header: " + key + " = " + value));
        })).onErrorResume(throwable -> {
            System.out.println("Error during token exchange: " + throwable.getMessage());
            return chain.filter(exchange);
        }).then();
    }

    private Mono<String> exchangeToken(ServerWebExchange exchange) {
String accessToken ="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNpZ25pbmdfNCJ9.eyJzdWIiOiJ2bXdhcmUuY29tOjk5ZGRiMDkzLTA3NWQtNDVkMi1hZDZhLWIxZjk2OGE3ZTk2MyIsImlzcyI6Imh0dHBzOi8vY29uc29sZS1zdGcuY2xvdWQudm13c2VydmljZXMuY29tIiwiY29udGV4dF9uYW1lIjoiYzQwZDNlNzgtZDM5Mi00YmE4LWEzMzctNDM1MzhiNWU4NDg1IiwiX25vbmNlIjoiNTE5ZjBjNDAtNDgwYy0xMWVmLWIzZDAtMTFlNzg1OWUxOGM0IiwiYXpwIjoiaTFmR2RqRjJiQVZWS3pPU3l5U01kWlE0bFNCSHdXM3BrTEciLCJhdXRob3JpemF0aW9uX2RldGFpbHMiOltdLCJkb21haW4iOiJ2bXdhcmUuY29tIiwiY29udGV4dCI6IjExYmYwYmRjLTIwMWQtNGQzNy1iOTNhLWZkMzQ3NmI2MWQxNiIsInBlcm1zIjpbImNzcDpwcm9qZWN0X2FkbWluIiwiY3NwOm9yZ19vd25lciIsImNzcDpiaWxsaW5nX3VzZXIiLCJjc3A6c3VwcG9ydF91c2VyIiwiZXh0ZXJuYWwvNWM5ZmIxNWEtMmI0My00MWI0LTgzOGQtYWY2NjBjNzAyY2ExL3NhbXBsZTpyb2xlIiwiY3NwOm9yZ19tZW1iZXIiLCJleHRlcm5hbC81YzlmYjE1YS0yYjQzLTQxYjQtODM4ZC1hZjY2MGM3MDJjYTEvc2dhZG06c3VwZXIiLCJleHRlcm5hbC9OZGxqanlMLUg3NzNoODFrTmpEbGFubTY3WkFfL3dzMV9jbG91ZDpiYXNpYyIsImNzcDpkZXZlbG9wZXIiLCJleHRlcm5hbC81YzlmYjE1YS0yYjQzLTQxYjQtODM4ZC1hZjY2MGM3MDJjYTEvc2dhZG06YWRtaW4iLCJleHRlcm5hbC9OZGxqanlMLUg3NzNoODFrTmpEbGFubTY3WkFfL3N0YWdpbmcuZHBhMC5vcmcvMzYxZjkzNTEtNzY2YS00ZjIwLWExOTAtNWMxZWViYmIxMGI5Om9yZ19tZW1iZXIiXSwiZXhwIjoxNzIyMzU0MTQyLCJpYXQiOjE3MjIzMzYxNDIsImp0aSI6ImMwZjdhZTIyLTgyNDEtNDNiMS1iMTc5LTkzOWFmMDBmYjU5NyIsImFjY3QiOiJkaWJAdm13YXJlLmNvbSIsInVzZXJuYW1lIjoiZGliIn0.zrDEqBNRNtYQccAbtnr6Z-vnibLw3c95u_Hj02cO4qTx_R_BEIeMGdT6FK0HOALZJcr7s6LtbDEYraUf-QLSDudSdnE-Xrb6e7uCLTe00qzjiwv6ac-jYfyGXWBHMIVjURJ2hjyVyDWDnlXaoLyh0x2tuxSZx3aV6oyqOMqBilbepvK4RUEuQeqkO7iqABgTBvo_gcGU7BUQzwkjP03hmzLWkrOxX9VaOIqLlzOXzWJeaceukGmIZNUclzpKBBYkx_2qQDKbbpZvw04M0G6yDOU66OeQ9v3mZElIzwRgTK0GAUQNXE6Tm1VZnKpJ48w1rKWNmFcjk3D0WXmrUjujpQ";

String idToken ="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InNpZ25pbmdfNCJ9.eyJzdWIiOiJ2bXdhcmUuY29tOjk5ZGRiMDkzLTA3NWQtNDVkMi1hZDZhLWIxZjk2OGE3ZTk2MyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczovL2NvbnNvbGUtc3RnLmNsb3VkLnZtd3NlcnZpY2VzLmNvbSIsImdyb3VwX25hbWVzIjpbInZtd2FyZS5jb20gdXNlcnNAU3lzdGVtIERvbWFpbiIsIkRMLkRldmVsb3BtZW50LkFsbEB2bXdhcmUuY29tIiwiZy5keW4uZXVjLXZkcC1kZW1vQHZtd2FyZS5jb20iLCJnLmV1Yy1naXRodWItYXV0aG9yaXplZC11c2Vyc0B2bXdhcmUuY29tIiwiZy5keW4udm13YXJlX2FsbF9hY3RpdmVfZW1wbG95ZWVzQHZtd2FyZS5jb20iLCJnLmR5bi5hbGxfdXNlcnNAdm13YXJlLmNvbSIsImcuZHluLmhlbHBub3dfYWxsX2FjdGl2ZV9lbXBsb3llZXNfZXhjbHVkZV9wcmVoaXJlQHZtd2FyZS5jb20iLCJnLmR5bi5oZWxwbm93X2FsbF9hY3RpdmVfZW1wbG95ZWVzQHZtd2FyZS5jb20iLCJBTEwgVVNFUlMgZXhjbC4gQm90c0BTeXN0ZW0gRG9tYWluIiwiQUxMIFVTRVJTICh2bXdhcmUuY29tKUBTeXN0ZW0gRG9tYWluIl0sImNvbnRleHRfbmFtZSI6ImM0MGQzZTc4LWQzOTItNGJhOC1hMzM3LTQzNTM4YjVlODQ4NSIsImdpdmVuX25hbWUiOiJCIiwiX25vbmNlIjoiNTE5ZjBjNDAtNDgwYy0xMWVmLWIzZDAtMTFlNzg1OWUxOGM0IiwiYXVkIjpbImkxZkdkakYyYkFWVkt6T1N5eVNNZFpRNGxTQkh3VzNwa0xHIl0sImF1dGhfdGltZSI6MTcyMjMxNjQyMywiZG9tYWluIjoidm13YXJlLmNvbSIsImdyb3VwX2lkcyI6WyJ2bXdhcmUuY29tOjdlMjRlYTkyLTFhODEtNDBiMC05ZDJjLTExMzEyNDM2MDk4MSIsInZtd2FyZS5jb206NzkxYTc5MzgtNzAzNi00MDY2LTkzMGYtMWUzZjhmYzRkMDk5Iiwidm13YXJlLmNvbTo4OWZhMDVkNi05YTE3LTRhMTYtYTFjZC1iOTk5ZjZiZmE2MjYiLCJ2bXdhcmUuY29tOjRkMjVhMmFmLTAxZWMtNGNiNi05ZDg2LTJkMTRkMWY5YjQ3NyIsInZtd2FyZS5jb206NTI3YWM2NmYtZTQ5OC00NjJkLThmOTQtM2JlMmQ2MzRhMTAzIiwidm13YXJlLmNvbTplYjEwMDBjMy01ZDczLTQwZWUtYjJkZC0yNWIxZDc0NTUzYTciLCJ2bXdhcmUuY29tOmZjODUzNjI2LTVlOGUtNGMyZi1iYTcxLWRmMDY3MzNiNzMxNyIsInZtd2FyZS5jb206ZTM2NGQyZGMtNDk1ZS00MjlkLTllNDgtZTZkNzc3ZDk5YWY3Iiwidm13YXJlLmNvbTowY2M1MzFjMi0wOGJlLTQwN2QtYjlkYS1jY2QyYzcxZGFmNTgiLCJ2bXdhcmUuY29tOjVlNmNmNjY3LWVjNDYtNDY0NS1iMGQyLWExNTQwOTAyN2IyMSJdLCJjb250ZXh0IjoiMTFiZjBiZGMtMjAxZC00ZDM3LWI5M2EtZmQzNDc2YjYxZDE2IiwiZXhwIjoxNzIyMzU0MTQyLCJpYXQiOjE3MjIzMzYxNDMsImZhbWlseV9uYW1lIjoiRGl2eWEiLCJqdGkiOiI0OThjNDAxYS0zNTQ1LTQyNzgtYjkyZi0yM2E4NzMyMDgxMGMiLCJlbWFpbCI6ImRpYkB2bXdhcmUuY29tIiwiYWNjdCI6ImRpYkB2bXdhcmUuY29tIiwidXNlcm5hbWUiOiJkaWIifQ.rn6CTTPQwY4QBdUibLiyOQm-MhUSpzUGDhB3iOu_36RS6MyGdjC9ll9UyyZYqnAavv2ZfLQU_Ot45QYpM-6jqlNCOPQLbTAfY3bXEodcD2qBc2WuJPv0ufi9c0ko2Sa3mG7USM4kjTe_3_PCqODGM8O5qR5q0POwOR4nNyJpj1yZ80_FMoH3jbB1JHPUD-zB16JwK1pvMv46UAOwiHM04h1_v8WSLRqhfFSKcWJNEvqg4vBZ3pSELQD6-c0IUQPCHBFnv6oWoHkPp5QL4DASyCt1L7DiT1I5KrqzrsbH-bjlK4TUvUyeZdm72am9BM_rrbfJ5yQYwUW9OMSpuPIqGw";
        return webClient.post()
                .uri(tokenExchangeUrl)
                .header(HttpHeaders.CONTENT_TYPE, "application/x-www-form-urlencoded")
                .body(BodyInserters.fromFormData("access_token", accessToken)
                        .with("id_token", idToken))
                .retrieve()
                .bodyToMono(String.class)
                .doOnSuccess(token -> System.out.println("Token exchange successful: " + token))
                .doOnError(error ->  System.out.println("Error during token exchange: " + error.getMessage()));
    }
}
